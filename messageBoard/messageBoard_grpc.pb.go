// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: messageBoard/messageBoard.proto

package grpcMessageBoard

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MessageBoard_PostMessage_FullMethodName       = "/messageBoard.MessageBoard/PostMessage"
	MessageBoard_GetLatestMessages_FullMethodName = "/messageBoard.MessageBoard/GetLatestMessages"
)

// MessageBoardClient is the client API for MessageBoard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageBoardClient interface {
	PostMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	GetLatestMessages(ctx context.Context, in *GetLatestRequest, opts ...grpc.CallOption) (MessageBoard_GetLatestMessagesClient, error)
}

type messageBoardClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageBoardClient(cc grpc.ClientConnInterface) MessageBoardClient {
	return &messageBoardClient{cc}
}

func (c *messageBoardClient) PostMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, MessageBoard_PostMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageBoardClient) GetLatestMessages(ctx context.Context, in *GetLatestRequest, opts ...grpc.CallOption) (MessageBoard_GetLatestMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageBoard_ServiceDesc.Streams[0], MessageBoard_GetLatestMessages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messageBoardGetLatestMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageBoard_GetLatestMessagesClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type messageBoardGetLatestMessagesClient struct {
	grpc.ClientStream
}

func (x *messageBoardGetLatestMessagesClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageBoardServer is the server API for MessageBoard service.
// All implementations must embed UnimplementedMessageBoardServer
// for forward compatibility
type MessageBoardServer interface {
	PostMessage(context.Context, *Message) (*Message, error)
	GetLatestMessages(*GetLatestRequest, MessageBoard_GetLatestMessagesServer) error
	mustEmbedUnimplementedMessageBoardServer()
}

// UnimplementedMessageBoardServer must be embedded to have forward compatible implementations.
type UnimplementedMessageBoardServer struct {
}

func (UnimplementedMessageBoardServer) PostMessage(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostMessage not implemented")
}
func (UnimplementedMessageBoardServer) GetLatestMessages(*GetLatestRequest, MessageBoard_GetLatestMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLatestMessages not implemented")
}
func (UnimplementedMessageBoardServer) mustEmbedUnimplementedMessageBoardServer() {}

// UnsafeMessageBoardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageBoardServer will
// result in compilation errors.
type UnsafeMessageBoardServer interface {
	mustEmbedUnimplementedMessageBoardServer()
}

func RegisterMessageBoardServer(s grpc.ServiceRegistrar, srv MessageBoardServer) {
	s.RegisterService(&MessageBoard_ServiceDesc, srv)
}

func _MessageBoard_PostMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageBoardServer).PostMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageBoard_PostMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageBoardServer).PostMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageBoard_GetLatestMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLatestRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageBoardServer).GetLatestMessages(m, &messageBoardGetLatestMessagesServer{stream})
}

type MessageBoard_GetLatestMessagesServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type messageBoardGetLatestMessagesServer struct {
	grpc.ServerStream
}

func (x *messageBoardGetLatestMessagesServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

// MessageBoard_ServiceDesc is the grpc.ServiceDesc for MessageBoard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageBoard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messageBoard.MessageBoard",
	HandlerType: (*MessageBoardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostMessage",
			Handler:    _MessageBoard_PostMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLatestMessages",
			Handler:       _MessageBoard_GetLatestMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "messageBoard/messageBoard.proto",
}
